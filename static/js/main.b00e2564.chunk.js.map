{"version":3,"sources":["Components/Python.tsx","Components/TextExtractor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Python","React","useState","pytonCode","setPythonCode","output","setOutput","isLoadingPlayground","setIsLoadingPlayground","useEffect","window","languagePluginLoader","then","console","log","pyodide","loadPackage","id","value","rows","cols","onChange","e","target","disabled","onClick","a","runPythonAsync","getImageURL","URLSearchParams","location","search","get","TextExtractor","ocr","setOcr","inProgress","setInprogress","progress","setProgress","image","setImage","doOCR","worker","createWorker","logger","m","load","loadLanguage","initialize","URL","createObjectURL","recognize","text","data","imageURL","type","files","src","className","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAqDeA,EAlCiB,WAAO,IAAD,EACCC,IAAMC,SAVzB,4IASkB,mBAC3BC,EAD2B,KAChBC,EADgB,OAENH,IAAMC,SAAS,kBAFT,mBAE3BG,EAF2B,KAEnBC,EAFmB,OAGoBL,IAAMC,UAAS,GAHnC,mBAG3BK,EAH2B,KAGNC,EAHM,KAelC,OAXAP,IAAMQ,WAAU,WACdC,OAAOC,qBAAqBC,MAAK,WAE/BC,QAAQC,IAAI,+BACZJ,OAAOK,QAAQC,YAAY,CAAC,OAAQ,UACpCR,GAAuB,GACvBF,EAAU,uBAEX,IAIC,gCACI,mDACA,0BAAUW,GAAG,OAAOC,MAAOf,EAAWgB,KAAM,EAAGC,KAAM,IAAKC,SAAU,SAAAC,GAAC,OAAIlB,EAAckB,EAAEC,OAAOL,UAChG,wBAAQM,SAAUjB,EAAqBkB,QAAO,sBAAE,4BAAAC,EAAA,+EAEvBhB,OAAOK,QAAQY,eAAexB,GAFP,OAEtCE,EAFsC,OAG5CC,EAAUD,GAHkC,gDAK5CQ,QAAQC,IAAR,MACAR,EAAU,uBANkC,yDAAhD,oBAUA,+BAAOD,Q,QC1CbuB,EAAc,WAElB,OAJO,IAAIC,gBAAgBnB,OAAOoB,SAASC,QAGZC,IAAI,UAmEtBC,MA9Df,WAA0B,IAAD,EACD/B,mBAAS,wBADR,mBAChBgC,EADgB,KACXC,EADW,OAEajC,oBAAS,GAFtB,mBAEhBkC,EAFgB,KAEJC,EAFI,OAGSnC,mBAAS,GAHlB,mBAGhBoC,EAHgB,KAGNC,EAHM,OAIGrC,mBAAS,IAJZ,mBAIhBsC,EAJgB,KAITC,EAJS,KAKjBC,EAAK,uCAAG,WAAOnB,GAAP,mBAAAG,EAAA,6DACNiB,EAASC,uBAAa,CAC1BC,OAAQ,SAACC,GAAD,OAAOP,EAAYO,EAAER,aAFnB,SAINK,EAAOI,OAJD,uBAKNJ,EAAOK,aAAa,OALd,uBAMNL,EAAOM,WAAW,OANZ,cAQZZ,GAAc,GACdF,EAAO,4BATK,SAWVM,EAASS,IAAIC,gBAAgB5B,IAXnB,UAcAoB,EAAOS,UACf7B,GAfQ,iBAaA8B,EAbA,EAaRC,KAAQD,KAKVhB,GAAc,GACdF,EAAOkB,GAnBG,kDAqBVxC,QAAQC,IAAR,MACAuB,GAAc,GACdF,EAAO,gCAvBG,0DAAH,sDAkCX,OAPA1B,qBAAU,WACR,IAAM8C,EAAW3B,IACb2B,GACFb,EAAMa,KAEP,IACH1C,QAAQC,IAAI,iBAEV,gCACE,gDACA,uBAAO0C,KAAK,OAAOvC,GAAG,WAAWO,SAAUY,EAAYf,SAAU,SAACC,GAAO,IAAD,EAChEmC,EAAK,UAAGnC,EAAEC,cAAL,aAAG,EAAUkC,MAExB,GAAIA,GAASA,EAAM,GACjB,OAAOf,EAAMe,EAAM,OAItBrB,GAAc,sDAAyBE,KAE7B,KAAVE,GAAgB,qBACfkB,IAAKlB,EACLmB,UAAU,WACVC,IAAI,SAEN,4BAAI1B,QCnDK2B,MAZf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,UCEOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b00e2564.chunk.js","sourcesContent":["import React from \"react\"\n\ndeclare global {\n  interface Window {\n    languagePluginLoader: any;\n    pyodide: any;\n  }\n}\n\n\nconst DEFAULT_PYTHON = \n`\nimport nltk\nnltk.download('punkt')\nsentence = 'At eight oclock on Thursday morning'\ntokens = nltk.word_tokenize(sentence)\ntokens\n`\n\nexport const Python: React.FC = () => {\n    const [pytonCode, setPythonCode] = React.useState(DEFAULT_PYTHON)\n    const [output, setOutput] = React.useState('...Loading....')\n    const [isLoadingPlayground, setIsLoadingPlayground] = React.useState(true)\n    React.useEffect(() => {\n      window.languagePluginLoader.then(function () {\n        \n        console.log('done loading running python')\n        window.pyodide.loadPackage(['nltk', 'numpy'])\n        setIsLoadingPlayground(false)\n        setOutput('...Waiting....')\n      })      \n    }, [])\n\n    \n    return (\n        <div>\n            <h1>python playground</h1>\n            <textarea id='code' value={pytonCode} rows={7} cols={100} onChange={e => setPythonCode(e.target.value)}></textarea>\n            <button disabled={isLoadingPlayground} onClick={async function () {\n              try {\n                const output = await window.pyodide.runPythonAsync(pytonCode)\n                setOutput(output)  \n              } catch (e) {\n                console.log(e)\n                setOutput('error check console')\n              }\n              \n            }}>Submit</button>\n            <span>{output}</span>\n        </div>\n    )\n};\n\nexport default Python;","import React, { useEffect, useState } from \"react\";\nimport { createWorker, ImageLike } from \"tesseract.js\";\n\nconst getURLParams = () => {\n  return new URLSearchParams(window.location.search)\n}\nconst getImageURL = () => {\n  const userURL = getURLParams().get('image')\n  return userURL\n}\n\n\nfunction TextExtractor() {\n  const [ocr, setOcr] = useState(\"Waiting for image...\");\n  const [inProgress, setInprogress] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [image, setImage] = useState('')\n  const doOCR = async (target: ImageLike)  => {\n    const worker = createWorker({\n      logger: (m) => setProgress(m.progress),\n    });\n    await worker.load();\n    await worker.loadLanguage(\"eng\");\n    await worker.initialize(\"eng\");\n\n    setInprogress(true)\n    setOcr('processing please wait..')\n    try {\n      setImage(URL.createObjectURL(target))\n      const {\n        data: { text },\n      } = await worker.recognize(\n        target\n      )\n          \n      setInprogress(false)\n      setOcr(text)\n    } catch (e) {\n      console.log(e)\n      setInprogress(false)\n      setOcr('Failed to read image data :(')\n    }\n\n  };\n  useEffect(() => {\n    const imageURL = getImageURL()\n    if (imageURL) {\n      doOCR(imageURL);\n    }\n  }, []);\n  console.log('app rendering')\n  return (\n    <div >\n      <h1>Text Extractor</h1>\n      <input type='file' id='uploader' disabled={inProgress} onChange={(e) => {\n        const files = e.target?.files\n        \n        if (files && files[0]) {\n          return doOCR(files[0])\n        }\n        }} />\n\n      {inProgress && <span>Percent Complete: {progress}</span>}\n      {/* <Search /> */}\n      {image !== '' && <img\n        src={image}\n        className=\"App-logo\"\n        alt=\"logo\"\n      />}\n      <p>{ocr}</p>\n    </div>\n  );\n}\n\nexport default TextExtractor;\n","import React from \"react\";\nimport \"./App.css\";\nimport Python from './Components/Python'\nimport TextExtractor from \"./Components/TextExtractor\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TextExtractor />\n\n        <Python />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}