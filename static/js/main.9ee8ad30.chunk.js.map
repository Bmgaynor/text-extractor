{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getImageURL","URLSearchParams","window","location","search","get","App","useState","ocr","setOcr","inProgress","setInprogress","progress","setProgress","image","setImage","doOCR","target","a","worker","createWorker","logger","m","load","loadLanguage","initialize","URL","createObjectURL","recognize","text","data","console","log","useEffect","imageURL","className","type","id","disabled","onChange","e","files","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAQMA,EAAc,WAElB,OAJO,IAAIC,gBAAgBC,OAAOC,SAASC,QAGZC,IAAI,UAmEtBC,MA/Df,WAAgB,IAAD,EACSC,mBAAS,wBADlB,mBACNC,EADM,KACDC,EADC,OAEuBF,oBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGmBJ,mBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAICC,EAJD,KAKPC,EAAK,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACNC,EAASC,uBAAa,CAC1BC,OAAQ,SAACC,GAAD,OAAOT,EAAYS,EAAEV,aAFnB,SAINO,EAAOI,OAJD,uBAKNJ,EAAOK,aAAa,OALd,uBAMNL,EAAOM,WAAW,OANZ,cAQZd,GAAc,GACdF,EAAO,4BATK,SAWVM,EAASW,IAAIC,gBAAgBV,IAXnB,UAcAE,EAAOS,UACfX,GAfQ,iBAaAY,EAbA,EAaRC,KAAQD,KAKVlB,GAAc,GACdF,EAAOoB,GAnBG,kDAqBVE,QAAQC,IAAR,MACArB,GAAc,GACdF,EAAO,gCAvBG,0DAAH,sDAiCX,OANAwB,qBAAU,WACR,IAAMC,EAAWlC,IACbkC,GACFlB,EAAMkB,KAEP,IAED,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gDACA,uBAAOC,KAAK,OAAOC,GAAG,WAAWC,SAAU5B,EAAY6B,SAAU,SAACC,GAAO,IAAD,EAChEC,EAAK,UAAGD,EAAEvB,cAAL,aAAG,EAAUwB,MAExB,GAAIA,GAASA,EAAM,GACjB,OAAOzB,EAAMyB,EAAM,OAItB/B,GAAc,sDAAyBE,KAE7B,KAAVE,GAAgB,qBACf4B,IAAK5B,EACLqB,UAAU,WACVQ,IAAI,SAEN,4BAAInC,UCxDGoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ee8ad30.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { createWorker, ImageLike } from \"tesseract.js\";\nimport \"./App.css\";\n// import Search from \"./Components/Search\"\n\nconst getURLParams = () => {\n  return new URLSearchParams(window.location.search)\n}\nconst getImageURL = () => {\n  const userURL = getURLParams().get('image')\n  return userURL\n}\n\nfunction App() {\n  const [ocr, setOcr] = useState(\"Waiting for image...\");\n  const [inProgress, setInprogress] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [image, setImage] = useState('')\n  const doOCR = async (target: ImageLike)  => {\n    const worker = createWorker({\n      logger: (m) => setProgress(m.progress),\n    });\n    await worker.load();\n    await worker.loadLanguage(\"eng\");\n    await worker.initialize(\"eng\");\n\n    setInprogress(true)\n    setOcr('processing please wait..')\n    try {\n      setImage(URL.createObjectURL(target))\n      const {\n        data: { text },\n      } = await worker.recognize(\n        target\n      )\n          \n      setInprogress(false)\n      setOcr(text)\n    } catch (e) {\n      console.log(e)\n      setInprogress(false)\n      setOcr('Failed to read image data :(')\n    }\n\n  };\n  useEffect(() => {\n    const imageURL = getImageURL()\n    if (imageURL) {\n      doOCR(imageURL);\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Text Extractor</h1>\n        <input type='file' id='uploader' disabled={inProgress} onChange={(e) => {\n          const files = e.target?.files\n          \n          if (files && files[0]) {\n            return doOCR(files[0])\n          }\n          }} />\n\n        {inProgress && <span>Percent Complete: {progress}</span>}\n        {/* <Search /> */}\n        {image !== '' && <img\n          src={image}\n          className=\"App-logo\"\n          alt=\"logo\"\n        />}\n        <p>{ocr}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}